#!/bin/bash

#=============================================================================
# SCRIPT D'ORCHESTRATION - Configuration Automatis√©e TicketingOnTheFly
#=============================================================================
# Ce script orchestre la configuration compl√®te de :
# - OpenLDAP (groupes et utilisateurs)
# - Zammad (groupes et int√©gration LDAP)
# - V√©rification de la configuration
#=============================================================================

set -e  # Arr√™t si erreur

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# R√©pertoire du script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

#=============================================================================
# BANNI√àRE ASCII
#=============================================================================

print_main_banner() {
    clear
    echo -e "${MAGENTA}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                    ‚ïë
‚ïë        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ïë
‚ïë        ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë ‚ïë
‚ïë           ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë ‚ïë
‚ïë           ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïë
‚ïë           ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë ‚ïë
‚ïë           ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïë
‚ïë                                                                    ‚ïë
‚ïë              Configuration Automatis√©e - Phase 10                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

print_separator() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

#=============================================================================
# V√âRIFICATION DE L'INFRASTRUCTURE
#=============================================================================

check_infrastructure() {
    echo ""
    print_separator
    echo -e "${CYAN}  V√©rification de l'infrastructure${NC}"
    print_separator
    echo ""
    
    cd "$PROJECT_ROOT"
    
    # V√©rifier que docker-compose est disponible
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå docker-compose n'est pas install√©${NC}"
        exit 1
    fi
    
    # V√©rifier les services critiques
    local services=("openldap" "zammad-nginx" "zammad-railsserver")
    local all_up=true
    
    for service in "${services[@]}"; do
        if docker-compose ps "$service" | grep -q "Up"; then
            echo -e "${GREEN}‚úÖ${NC} $service est d√©marr√©"
        else
            echo -e "${RED}‚ùå${NC} $service n'est pas d√©marr√©"
            all_up=false
        fi
    done
    
    if [ "$all_up" = false ]; then
        echo ""
        echo -e "${RED}Certains services ne sont pas d√©marr√©s.${NC}"
        echo -e "${YELLOW}Ex√©cutez d'abord : ./init.sh${NC}"
        exit 1
    fi
    
    echo ""
    echo -e "${GREEN}‚úÖ Infrastructure pr√™te${NC}"
}

#=============================================================================
# AFFICHAGE DU R√âSUM√â DE CONFIGURATION
#=============================================================================

show_configuration_summary() {
    echo ""
    print_separator
    echo -e "${CYAN}  üìä R√©sum√© de la configuration${NC}"
    print_separator
    echo ""
    
    if [ ! -f "$SCRIPT_DIR/config.yaml" ]; then
        echo -e "${RED}‚ùå Fichier config.yaml introuvable${NC}"
        exit 1
    fi
    
    # V√©rifier que yq est install√©
    if ! command -v yq &> /dev/null; then
        echo -e "${YELLOW}Installation de yq en cours...${NC}"
        if command -v snap &> /dev/null; then
            sudo snap install yq
        else
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
        fi
    fi
    
    LDAP_GROUPS=$(yq eval '.ldap.groups | length' "$SCRIPT_DIR/config.yaml")
    LDAP_USERS=$(yq eval '.ldap.users | length' "$SCRIPT_DIR/config.yaml")
    ZAMMAD_GROUPS=$(yq eval '.zammad.groups | length' "$SCRIPT_DIR/config.yaml")
    
    echo -e "   ${CYAN}Groupes LDAP :${NC} $LDAP_GROUPS"
    echo -e "   ${CYAN}Utilisateurs LDAP :${NC} $LDAP_USERS"
    echo -e "   ${CYAN}Groupes Zammad :${NC} $ZAMMAD_GROUPS"
    echo -e "   ${CYAN}Mapping :${NC} 1:1 (LDAP ‚Üî Zammad)"
    echo ""
    echo -e "${CYAN}üìù Groupes qui seront cr√©√©s :${NC}"
    
    for ((i=0; i<$LDAP_GROUPS; i++)); do
        GROUP_NAME=$(yq eval ".ldap.groups[$i].name" "$SCRIPT_DIR/config.yaml")
        echo -e "   ‚Ä¢ $GROUP_NAME"
    done
    
    echo ""
}

#=============================================================================
# DEMANDE DE CONFIRMATION
#=============================================================================

ask_confirmation() {
    echo ""
    print_separator
    echo -e "${YELLOW}  ‚ö†Ô∏è  Confirmation${NC}"
    print_separator
    echo ""
    echo -e "${YELLOW}Cette op√©ration va configurer OpenLDAP et Zammad${NC}"
    echo -e "Les donn√©es existantes seront conserv√©es, seules les nouvelles"
    echo -e "entr√©es seront ajout√©es."
    echo ""
    read -p "Continuer ? (o/N) : " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[OoYy]$ ]]; then
        echo ""
        echo -e "${RED}Configuration annul√©e${NC}"
        exit 0
    fi
}

#=============================================================================
# CONFIGURATION OPENLDAP
#=============================================================================

configure_openldap() {
    echo ""
    print_separator
    echo -e "${CYAN}  Configuration OpenLDAP${NC}"
    print_separator
    echo ""
    
    chmod +x "$SCRIPT_DIR/setup-ldap.sh"
    
    if "$SCRIPT_DIR/setup-ldap.sh"; then
        echo -e "${GREEN}‚úÖ OpenLDAP configur√© avec succ√®s${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de la configuration d'OpenLDAP${NC}"
        exit 1
    fi
}

#=============================================================================
# CONFIGURATION ZAMMAD
#=============================================================================

configure_zammad() {
    echo ""
    print_separator
    echo -e "${CYAN}  Configuration Zammad${NC}"
    print_separator
    echo ""
    
    chmod +x "$SCRIPT_DIR/setup-zammad.sh"
    
    if "$SCRIPT_DIR/setup-zammad.sh"; then
        echo -e "${GREEN}‚úÖ Zammad configur√© avec succ√®s${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de la configuration de Zammad${NC}"
        exit 1
    fi
}

#=============================================================================
# V√âRIFICATION DE LA CONFIGURATION
#=============================================================================

verify_configuration() {
    echo ""
    print_separator
    echo -e "${CYAN}  V√©rification de la configuration${NC}"
    print_separator
    echo ""
    
    # Lire le domaine
    DOMAIN=$(grep "^DOMAIN=" "$PROJECT_ROOT/.env" | cut -d'=' -f2)
    BASE_DN=$(echo "$DOMAIN" | sed 's/\./,dc=/g' | sed 's/^/dc=/')
    
    # Compter les groupes LDAP
    LDAP_GROUPS_COUNT=$(docker-compose -f "$PROJECT_ROOT/docker-compose.yml" exec -T openldap \
        ldapsearch -x -b "ou=groups,$BASE_DN" "(objectClass=groupOfNames)" dn 2>/dev/null | grep -c "^dn:" || echo "0")
    
    # Compter les utilisateurs LDAP
    LDAP_USERS_COUNT=$(docker-compose -f "$PROJECT_ROOT/docker-compose.yml" exec -T openldap \
        ldapsearch -x -b "ou=users,$BASE_DN" "(objectClass=inetOrgPerson)" dn 2>/dev/null | grep -c "^dn:" || echo "0")
    
    # Compter les groupes Zammad
    ZAMMAD_GROUPS_COUNT=$(docker-compose -f "$PROJECT_ROOT/docker-compose.yml" exec -T zammad-railsserver \
        rails r "puts Group.count" 2>/dev/null | tail -n 1 || echo "0")
    
    echo -e "   ${CYAN}Groupes LDAP cr√©√©s :${NC} $LDAP_GROUPS_COUNT"
    echo -e "   ${CYAN}Utilisateurs LDAP cr√©√©s :${NC} $LDAP_USERS_COUNT"
    echo -e "   ${CYAN}Groupes Zammad cr√©√©s :${NC} $ZAMMAD_GROUPS_COUNT"
    echo ""
    
    if [ "$LDAP_GROUPS_COUNT" -gt 0 ] && [ "$LDAP_USERS_COUNT" -gt 0 ] && [ "$ZAMMAD_GROUPS_COUNT" -gt 0 ]; then
        echo -e "${GREEN}‚úÖ Configuration v√©rifi√©e avec succ√®s${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rification partielle - Certaines entr√©es peuvent √™tre manquantes${NC}"
    fi
}

#=============================================================================
# AFFICHAGE DU R√âSUM√â FINAL
#=============================================================================

show_final_summary() {
    DOMAIN=$(grep "^DOMAIN=" "$PROJECT_ROOT/.env" | cut -d'=' -f2)
    
    echo ""
    print_separator
    echo -e "${GREEN}  ‚úÖ Configuration termin√©e avec succ√®s !${NC}"
    print_separator
    echo ""
    echo -e "${CYAN}üåê Acc√®s aux services :${NC}"
    echo ""
    echo -e "   ${YELLOW}Zammad :${NC} http://zammad.$DOMAIN"
    echo -e "   ${YELLOW}phpLDAPadmin :${NC} http://ldap.$DOMAIN"
    echo -e "   ${YELLOW}Wiki.js :${NC} http://wiki.$DOMAIN"
    echo -e "   ${YELLOW}Grafana :${NC} http://grafana.$DOMAIN"
    echo ""
    echo -e "${CYAN}üë• Comptes cr√©√©s :${NC}"
    echo ""
    
    # Afficher les 5 premiers utilisateurs
    USER_COUNT=$(yq eval '.ldap.users | length' "$SCRIPT_DIR/config.yaml")
    local max_display=$((USER_COUNT < 5 ? USER_COUNT : 5))
    
    for ((i=0; i<$max_display; i++)); do
        UID=$(yq eval ".ldap.users[$i].uid" "$SCRIPT_DIR/config.yaml")
        PASSWORD=$(yq eval ".ldap.users[$i].password" "$SCRIPT_DIR/config.yaml")
        GROUPS=$(yq eval ".ldap.users[$i].groups | join(\", \")" "$SCRIPT_DIR/config.yaml")
        
        echo -e "   ${YELLOW}$UID${NC}"
        echo -e "     Mot de passe : $PASSWORD"
        echo -e "     Groupes : $GROUPS"
        echo ""
    done
    
    if [ "$USER_COUNT" -gt 5 ]; then
        echo -e "   ${CYAN}... et $((USER_COUNT - 5)) autre(s) utilisateur(s)${NC}"
        echo ""
    fi
    
    echo -e "${CYAN}üìö Documentation :${NC}"
    echo -e "   ‚Ä¢ Guide rapide : ${YELLOW}doc/QUICK-START.md${NC}"
    echo -e "   ‚Ä¢ Personnalisation : ${YELLOW}doc/GUIDE-PERSONNALISATION.md${NC}"
    echo -e "   ‚Ä¢ Phase 10 : ${YELLOW}doc/10 - Configuration Automatis√©e.md${NC}"
    echo ""
    print_separator
    echo ""
}

#=============================================================================
# FONCTION PRINCIPALE
#=============================================================================

main() {
    print_main_banner
    check_infrastructure
    show_configuration_summary
    ask_confirmation
    configure_openldap
    configure_zammad
    verify_configuration
    show_final_summary
}

# Ex√©cuter le script
main "$@"
