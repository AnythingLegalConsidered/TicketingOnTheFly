version: '3.8'

services:
  # --- Dépendances pour Zammad ---
  zammad-db:
    image: postgres:15
    container_name: zammad-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=${TZ}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ticketing_network

  zammad-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: zammad-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - TZ=${TZ}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ticketing_network

  zammad-redis:
    image: redis:7-alpine
    container_name: zammad-redis
    restart: unless-stopped
    networks:
      - ticketing_network

  # --- Zammad init job ---
  zammad-init:
    image: zammad/zammad:latest
    container_name: zammad-init
    command: zammad-init
    restart: on-failure
    depends_on:
      - zammad-db
      - zammad-elasticsearch
      - zammad-redis
    environment:
      - POSTGRESQL_HOST=zammad-db
      - POSTGRESQL_DB=${POSTGRES_DB}
      - POSTGRESQL_USER=${POSTGRES_USER}
      - POSTGRESQL_PASS=${POSTGRES_PASSWORD}
      - ELASTICSEARCH_HOST=zammad-elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEMA=http
      - REDIS_URL=redis://zammad-redis:6379
      - TZ=${TZ}
    volumes:
      - zammad_data:/opt/zammad/
    networks:
      - ticketing_network

  # --- Zammad Rails server ---
  zammad-railsserver:
    image: zammad/zammad:latest
    container_name: zammad-railsserver
    command: zammad-railsserver
    restart: unless-stopped
    depends_on:
      - zammad-init
    environment:
      - POSTGRESQL_HOST=zammad-db
      - POSTGRESQL_DB=${POSTGRES_DB}
      - POSTGRESQL_USER=${POSTGRES_USER}
      - POSTGRESQL_PASS=${POSTGRES_PASSWORD}
      - ELASTICSEARCH_HOST=zammad-elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEMA=http
      - REDIS_URL=redis://zammad-redis:6379
      - TZ=${TZ}
    ports:
      - "127.0.0.1:8082:3000"
    volumes:
      - zammad_data:/opt/zammad/
    networks:
      - ticketing_network

  # --- Zammad Websocket ---
  zammad-websocket:
    image: zammad/zammad:latest
    container_name: zammad-websocket
    command: zammad-websocket
    restart: unless-stopped
    depends_on:
      - zammad-init
    environment:
      - POSTGRESQL_HOST=zammad-db
      - POSTGRESQL_DB=${POSTGRES_DB}
      - POSTGRESQL_USER=${POSTGRES_USER}
      - POSTGRESQL_PASS=${POSTGRES_PASSWORD}
      - ELASTICSEARCH_HOST=zammad-elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEMA=http
      - REDIS_URL=redis://zammad-redis:6379
      - TZ=${TZ}
    volumes:
      - zammad_data:/opt/zammad/
    networks:
      - ticketing_network

  # --- Zammad Scheduler (background jobs) ---
  zammad-scheduler:
    image: zammad/zammad:latest
    container_name: zammad-scheduler
    command: zammad-scheduler
    restart: unless-stopped
    depends_on:
      - zammad-init
    environment:
      - POSTGRESQL_HOST=zammad-db
      - POSTGRESQL_DB=${POSTGRES_DB}
      - POSTGRESQL_USER=${POSTGRES_USER}
      - POSTGRESQL_PASS=${POSTGRES_PASSWORD}
      - ELASTICSEARCH_HOST=zammad-elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEMA=http
      - REDIS_URL=redis://zammad-redis:6379
      - TZ=${TZ}
    volumes:
      - zammad_data:/opt/zammad/
    networks:
      - ticketing_network

  # --- Zammad Nginx (frontend) ---
  zammad-nginx:
    image: zammad/zammad:latest
    container_name: zammad-nginx
    command: zammad-nginx
    restart: unless-stopped
    depends_on:
      - zammad-init
      - zammad-railsserver
      - zammad-websocket
    environment:
      - NGINX_PORT=8080
      - TZ=${TZ}
      - ZAMMAD_RAILSSERVER_HOST=zammad-railsserver
      - ZAMMAD_WEBSOCKET_HOST=zammad-websocket
      - POSTGRESQL_HOST=zammad-db
      - POSTGRESQL_DB=${POSTGRES_DB}
      - POSTGRESQL_USER=${POSTGRES_USER}
      - POSTGRESQL_PASS=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://zammad-redis:6379
    ports:
      - "127.0.0.1:8081:8080"
    volumes:
      - zammad_data:/opt/zammad/
    networks:
      - ticketing_network

  # --- Base de données pour OCS Inventory ---
  ocs-db:
    image: mariadb:10.11
    container_name: ocs-db
    restart: unless-stopped
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${OCS_DB_NAME}
      - MARIADB_USER=${OCS_DB_USER}
      - MARIADB_PASSWORD=${OCS_DB_PASSWORD}
      - TZ=${TZ}
    volumes:
      - ocs_db_data:/var/lib/mysql
    networks:
      - ticketing_network

  # --- Serveur d'inventaire : OCS Inventory ---
  ocs-server:
    image: ocsinventory/ocsinventory-docker-image:latest
    container_name: ocs-server
    restart: unless-stopped
    depends_on:
      - ocs-db
    environment:
      - OCS_DBSERVER_READ=ocs-db
      - OCS_DBSERVER_WRITE=ocs-db
      - OCS_DBNAME=${OCS_DB_NAME}
      - OCS_DBUSER=${OCS_DB_USER}
      - OCS_DBPASS=${OCS_DB_PASSWORD}
      - TZ=${TZ}
    ports:
      # Port pour l'interface web et les agents. Sera géré par Traefik plus tard.
      - "127.0.0.1:8083:80"
    volumes:
      # Volume pour les données persistantes d'OCS
      - ocs_data:/usr/share/ocsinventory-reports
      - ocs_perlcomdata:/etc/ocsinventory-reports
      - ocs_ocsreportsdata:/var/lib/ocsinventory-reports
    networks:
      - ticketing_network

  # --- Service d'annuaire : OpenLDAP ---
  openldap:
    image: osixia/openldap:1.5.0
    container_name: openldap
    restart: unless-stopped
    environment:
      # Utilise le domaine défini dans le fichier .env
      - LDAP_DOMAIN=${DOMAIN}
      # Utilise le mot de passe admin défini dans le fichier .env
      - LDAP_ADMIN_PASSWORD=${LDAP_ADMIN_PASSWORD}
      # Configuration pour la réplication (non utilisée ici mais bonne pratique)
      - LDAP_CONFIG_PASSWORD=${LDAP_ADMIN_PASSWORD}
      # Supprime la base de données existante au démarrage si le volume est vide,
      # pour assurer une installation propre.
      - LDAP_REMOVE_CONFIG_AFTER_SETUP=true
      - TZ=${TZ}
    volumes:
      # Volume pour la base de données LDAP
      - ldap_data:/var/lib/ldap
      # Volume pour la configuration de slapd (le démon LDAP)
      - ldap_config:/etc/ldap/slapd.d
    networks:
      - ticketing_network

  # --- Interface de gestion pour OpenLDAP : phpLDAPadmin ---
  phpldapadmin:
    image: osixia/phpldapadmin:0.9.0
    container_name: phpldapadmin
    restart: unless-stopped
    environment:
      # Indique à phpLDAPadmin où trouver le serveur LDAP
      - PHPLDAPADMIN_LDAP_HOSTS=openldap
      # Permet de se connecter avec le DN complet (plus sécurisé)
      - PHPLDAPADMIN_LDAP_CLIENT_TLS=false
      - PHPLDAPADMIN_HTTPS=false
      - TZ=${TZ}
    ports:
      # Port pour accéder à l'interface web. NE PAS exposer sur internet.
      - "127.0.0.1:8080:80"
    depends_on:
      - openldap
    networks:
      - ticketing_network

  # --- Service de gestion Docker : Portainer ---
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    restart: unless-stopped
    ports:
      # Port pour accéder à l'interface web de Portainer.
      # NE PAS exposer ce port sur internet directement. L'accès se fera via Traefik plus tard.
      - "127.0.0.1:9443:9443"
      - "127.0.0.1:9000:9000"
    volumes:
      # Volume pour stocker les données de Portainer de manière persistante
      - portainer_data:/data
      # Donne à Portainer l'accès à Docker pour qu'il puisse gérer les autres conteneurs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ticketing_network
    environment:
      - TZ=${TZ}

# --- Définition des volumes nommés ---
# Les volumes permettent de sauvegarder les données même si les conteneurs sont supprimés.
volumes:
  portainer_data:
  ldap_data:
  ldap_config:
  postgres_data:
  elasticsearch_data:
  zammad_data:
  ocs_db_data:
  ocs_data:
  ocs_perlcomdata:
  ocs_ocsreportsdata:

# --- Définition des réseaux ---
# Créer un réseau dédié permettra à nos conteneurs de communiquer de manière isolée.
networks:
  ticketing_network:
    name: systeme-ticketing-net
    driver: bridge
